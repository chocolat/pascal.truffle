(root source.pascal
    (zone keyword.control.pascal
        (match
            (regex [\b(?i:(absolute|abstract|all|and|and_then|array|as|asm|attribute|begin|bindable|case|class|const|constructor|destructor|div|do|do|else|end|except|export|exports|external|far|file|finalization|finally|for|forward|goto|if|implementation|import|in|inherited|initialization|interface|interrupt|is|label|library|mod|module|name|near|nil|not|object|of|only|operator|or|or_else|otherwise|packed|pow|private|program|property|protected|public|published|qualified|record|repeat|resident|restricted|segment|set|shl|shr|then|to|try|type|unit|until|uses|value|var|view|virtual|while|with|xor))\b])))
    (zone meta.function.prototype.pascal
        (match
            (regex [\b(?i:(function|procedure))\b\s+(\w+(\.\w+)?)(\(.*?\))?;\s*(?=(?i:attribute|forward|external))]
                (1 storage.type.prototype.pascal)
                (2 entity.name.function.prototype.pascal))))
    (zone meta.function.pascal
        (match
            (regex [\b(?i:(function|procedure))\b\s+(\w+(\.\w+)?)]
                (1 storage.type.function.pascal)
                (2 entity.name.function.pascal))))
    (zone constant.numeric.pascal
        (match
            (regex [\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b])))
    (zone comment.line.double-dash.pascal.one
        (match
            (regex [(--).*$\n?]
                (1 punctuation.definition.comment.pascal))))
    (zone comment.line.double-slash.pascal.two
        (match
            (regex [(//).*$\n?]
                (1 punctuation.definition.comment.pascal))))
    (zone comment.block.pascal.one
        (start
            (regex [\(\*]
                (0 punctuation.definition.comment.pascal)))
        (end
            (regex [\*\)]
                (0 punctuation.definition.comment.pascal))))
    (zone comment.block.pascal.two
        (start
            (regex [\{]
                (0 punctuation.definition.comment.pascal)))
        (end
            (regex [\}]
                (0 punctuation.definition.comment.pascal))))
    (zone string.quoted.double.pascal
        (start
            (regex "
                (0 punctuation.definition.string.begin.pascal)))
        (end
            (regex "
                (0 punctuation.definition.string.end.pascal)))
        (subzones
            (zone constant.character.escape.pascal
                (match
                    (regex \\.)))))
    (zone string.quoted.single.pascal
        (start
            (regex '
                (0 punctuation.definition.string.begin.pascal)))
        (end
            (regex '
                (0 punctuation.definition.string.end.pascal)))
        (subzones
            (zone constant.character.escape.apostrophe.pascal
                (match '')))))